<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/new-blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/new-blog/" rel="alternate" type="text/html" /><updated>2023-06-18T17:28:17+00:00</updated><id>http://localhost:4000/new-blog/feed.xml</id><title type="html">Larry Blog</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><author><name>Larry</name></author><entry><title type="html">Virtual Environment: Why and How?</title><link href="http://localhost:4000/new-blog/2023/04/22/venv.html" rel="alternate" type="text/html" title="Virtual Environment: Why and How?" /><published>2023-04-22T00:00:00+00:00</published><updated>2023-04-22T00:00:00+00:00</updated><id>http://localhost:4000/new-blog/2023/04/22/venv</id><content type="html" xml:base="http://localhost:4000/new-blog/2023/04/22/venv.html"><![CDATA[<p>This post is based on a <a href="https://youtu.be/KxvKCSwlUv8">Youtube video</a> by teclado, which I belive, is the clearest explanation of virtual environment for python available online.</p>

<p>Table of Contents:</p>

<ul>
  <li><a href="#why-do-we-need-virtual-environment-for-python-projects">Why do we need virtual environment for Python projects?</a></li>
  <li><a href="#python-versions-on-your-mac">Python versions on your Mac</a></li>
  <li><a href="#default-python-directory">Default python directory</a></li>
  <li><a href="#install-virtual-environment-for-projects-on-python-3">Install virtual environment for projects on Python 3</a></li>
  <li><a href="#install-virtual-environment-for-projects-on-python-2">Install virtual environment for projects on Python 2</a></li>
  <li><a href="#activate-and-de-activate-virtual-environment">Activate and de-activate virtual environment</a></li>
  <li><a href="#install-3rd-party-libraries-for-the-virtual-environment">Install 3rd party libraries for the virtual environment</a></li>
  <li><a href="#conclusion">Conclusion</a></li>
</ul>

<h2 id="why-do-we-need-virtual-environment-for-python-projects">Why do we need virtual environment for Python projects?</h2>

<p>Python is a fast evloving language, you can tell its development pace by looking at the versions released almost every month. The proper functioning of Python projects also rely on a lot of 3rd party libraries, or as people call them, depencies, which are updating quickly along the way as well.</p>

<p>Each version upgrade might be small, but accumulative upgrades eventually lead to fundamental changes to some functions or variables, and the project developed on certain version of Python and libraries may not run correctly in the latest version. Since there are so many versions of Python itself and the 3rd party libraries, your projects will inevitably run into conflicts.</p>

<p>A virtual environment is the way to solve this version conflict problem. Simply put, we put the corresponding version of python and all libraries/depencies into the same file folder with the project, creating a mini environment for the project. Whenver the project run, it runs under this very environment, no matter what other versions the computer are installed, or other projects depend on.</p>

<h2 id="python-versions-on-your-mac">Python versions on your Mac</h2>

<p>You may have installed different versions of Python on your Mac. To check the versions, you type <code class="language-plaintext highlighter-rouge">python</code> in the Terminal, then press <code class="language-plaintext highlighter-rouge">tab</code> button.</p>

<p><img style="display: inline-block; width: 100%; object-fit: cover;" src="https://lh3.googleusercontent.com/9oHAa_hrDpvQyicbZsj7JpWrgLuDf34IgUj6WPc8cPxh6AANPZ-ugSb2lTvo9_RMF_HaRIB_qVTJbf6Lek-KAFJo72duP400lBjSKrvMFOzfo6ds0oKdo8DDg1yojDGp4iPzlTcQ_w=w2400" alt="na" /></p>

<p>You can see that I have both python 2 and 3 installed on my Mac, and the exact versions are 2.7 and 3.11, respectively.</p>

<h2 id="default-python-directory">Default python directory</h2>

<p>Now here comes the question, if you key in some python command in the Terminal, which version would the computer use to execute your command?</p>

<p>To find out the answer, we can type <code class="language-plaintext highlighter-rouge">echo $PATH$</code> and press <code class="language-plaintext highlighter-rouge">return</code>:</p>

<p><img style="display: inline-block; width: 100%; object-fit: cover;" src="https://lh3.googleusercontent.com/_l2nHzH2eLwVRsjwbnP7Wc4uplZ_oscGQRasz2TR3SHHRrwUZa5sUgq0cpzKa8qhdA2gYBVAPc4L2a8g8dIUNkZnydfaqQ0HygA0_snW-_bzT9LTCUMvlHRNlnV4mQ2bdGdYRpjkAA=w2400" alt="na" /></p>

<p><code class="language-plaintext highlighter-rouge">echo $PATH$</code> gives you a list of directories, each separated by a colon. In layman’s terms, a path (or the search path) is the list of directories that will be searched for anything that you type on the command line.</p>

<p>You can see that the directory of python 3.11 comes before that of 2.7, so theoretically, whatever python command I key in, the system should search any corresponding word in 3.11 versions.</p>

<p><img style="display: inline-block; width: 100%; object-fit: cover;" src="https://lh3.googleusercontent.com/5WNGM-gepNK_Ru6lAjH3ZTlpK38h3k3JeOryJKAX62eH4T7JyFkw24PIMrbHYDbRWzkjDj62jEhBg-aRWKF_PYH-NQ9tK-Qy2iX9jZ677qYkMzRctH3fJrJUcUsuXhrtEOSRj3Nc0w=w2400" alt="insertion sort" /></p>

<p>However, here I have a small problem, for whenever I type <code class="language-plaintext highlighter-rouge">python -V</code>, it pops up the older version as below. But anyway, this example shows that we need to keep an eye on the correct version the system will look for when executing our python command.</p>

<h2 id="install-virtual-environment-for-projects-on-python-3">Install virtual environment for projects on Python 3</h2>

<p>Python 3 comes with a very handy command <code class="language-plaintext highlighter-rouge">-m venv</code> to create a virtual environment.</p>

<p>Let’s create a new folder <code class="language-plaintext highlighter-rouge">Project</code>, and under this folder, we have a <code class="language-plaintext highlighter-rouge">hello.py</code> file only.</p>

<p><img style="display: inline-block; width: 100%; object-fit: cover;" src="https://lh3.googleusercontent.com/pw/AJFCJaUgVF6VRZ0cGXCn1cKHzPzsW-XupOjpCBFKgZN_pP3bzuXmzQDXkSy0thIDzES7jguo5bH0e4fQEzgbpcRg7rQ1OMPVj3SqzO6DUGMd57KUWW0v-Yk=w2400" alt="na" /></p>

<p><br /></p>

<p>Now we want this python project to be run with version 3.  We simply open terminal and go to the <code class="language-plaintext highlighter-rouge">Project</code> folder, then type:</p>

<p><img style="display: inline-block; width: 100%; object-fit: cover;" src="https://lh3.googleusercontent.com/pw/AJFCJaX65pHbIvc18-lFAz8oOd0Qt8dqRsHJESNUpVhAtL4Tw52_Uo7Buv7aZgpAJuCxrYI0aNSS3n65nbCCvvU7cW-QvNnWvAxCkry8waK-KMDcyMbJoJM=w2400" alt="na" /></p>

<p>In couple of seconds, the system creates a sub-folder named “my-env” under the <code class="language-plaintext highlighter-rouge">Project</code> folder.</p>

<p><img style="display: inline-block; width: 100%; object-fit: cover;" src="https://lh3.googleusercontent.com/pw/AJFCJaUaTYuzPT8h69pUIgcG7QgQMMfMTfWxgCXYB_HWH3gMcTCw8mFnrPcKmg0_EeMcCe6MEizTsycR4azognKUBi7mypJN2Du1AEmKyVc8uO08MoW_NaE=w2400" alt="insertion sort" />
<br /></p>

<p>Open the sub-folder, we can see the system copied python 3.11 and all native libraries into this folder. In another word, it has created all components of a virtual environment for us.</p>

<p><img style="display: inline-block; width: 80%; object-fit: cover;" src="https://lh3.googleusercontent.com/t3uNAu7LixAVa28r6ZC1rrphvkrZp5XyvTPGrSxSJjd1YgNGDMDVw6WbfZOaCEUJUoP8sGmGenyEk9AZ_VC9jdkrBo6pPfFhsmntsLe6PJjheP-sa3JCrsUUCFTHlAtINKWuwwWuWQ=w2400" alt="insertion sort" />
<br /></p>

<h2 id="install-virtual-environment-for-projects-on-python-2">Install virtual environment for projects on Python 2</h2>

<p>The basic idea is the same, but in Python 2 we don’t have a <code class="language-plaintext highlighter-rouge">venv</code> commend, but use <code class="language-plaintext highlighter-rouge">virtualenv</code> instead.</p>

<p>First of all, we use <code class="language-plaintext highlighter-rouge">pip</code> to install <code class="language-plaintext highlighter-rouge">virtualenv</code> package. <code class="language-plaintext highlighter-rouge">pip</code> is a Python pacakge manager, usually comes with any Python versions. In terminal, type in:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install virtualenv
</code></pre></div></div>

<p>Then go to Python 2 project folder, create the components using the following command, and let the system do the remaining job for you:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>virtualenv my-env2
</code></pre></div></div>

<h2 id="activate-and-de-activate-virtual-environment">Activate and de-activate virtual environment</h2>

<p>It’s very straight forward to activate the virtual environment for a specific project. You simply to the components sub-folder under the project main folder, and run the <code class="language-plaintext highlighter-rouge">activate</code> command. Remember, you need to put <code class="language-plaintext highlighter-rouge">source</code> command before it.</p>

<p><img style="display: inline-block; width: 100%; object-fit: cover;" src="https://lh3.googleusercontent.com/sQJ2X7L7XCFk4GRBWvSM_7SIkRL4FxDHF40o1R3O8-50F1Tlc0BwAFN7Yroezl-_n1ezuyvBoTyKKTmshCuOAKYSRBfiX4fBECJV3ny90m6J4kHaRSEkkl2f0CdNbSUwhhqY-h47rQ=w2400" alt="na" /></p>

<p>Once activated, you can tell it from the environment name in parenthesis before the prompt.</p>

<p>After you finish running the project, or you want to switch to another project, you type <code class="language-plaintext highlighter-rouge">deactivate</code> to switch off the virtual environment. The name before the prompt will go away, meaning the previous virtual environment is off.</p>

<h2 id="install-3rd-party-libraries-for-the-virtual-environment">Install 3rd party libraries for the virtual environment</h2>

<p>Now we want to install some 3rd party libraries that our project is going to use. We use <code class="language-plaintext highlighter-rouge">pip</code> to install libraries, and whenever we run <code class="language-plaintext highlighter-rouge">pip</code> under project folder prompt, we want to install them into the virtual environment of the project.</p>

<p>For example, if we want to install <code class="language-plaintext highlighter-rouge">flask</code> to the project, first we have the virtual environment activated, then</p>

<p><img style="display: inline-block; width: 100%; object-fit: cover;" src="https://lh3.googleusercontent.com/h8E1xGP60RWvAxk4klDgMCO0OVNQZFl8jTQ0HApcrGb1kUqDpPEYPy7ognnT9sYryuRvcH9KIj59LW1_VSpP45y9vn9ZbJPzMUKsStP_j6D4WSkKYORrk5dRuln8xq9vvn0YAOho_A=w2400" alt="na" /></p>

<p>The <code class="language-plaintext highlighter-rouge">pip</code> package manager will install the latest <code class="language-plaintext highlighter-rouge">flask</code> library to project’s virtual environment.</p>

<p><img style="display: inline-block; width: 80%; object-fit: cover;" src="https://lh3.googleusercontent.com/qdoDYWN7qKvzbgfP9Mwrh7hnExSVw01XY4pTz8PrZMqmxsgKjX-YNULZmLOMdltKlFL7bkvx9Zh1BKlzA75XcKbraYgjPb2mICEMOsdM9to5vuIPKg0dueE2eotelA16lmbN4gCPPg=w2400" alt="na" />
<br /></p>

<p>A nice practice to keep 3rd libraries in neat order and easy to track, is to use a text file to record all libraries and their correct versions for the project. As a common practice, we name this text file <code class="language-plaintext highlighter-rouge">requirements.txt</code>, and put this file in the root foler of the project.</p>

<p>The content of the text file usually like this (project sensative);</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>flask==1.1.3
requests
gunicorn&gt;=2.3,&lt;3.0
</code></pre></div></div>

<p>With this txt file, we can in fact install all listed libraries using one line of command:</p>

<p><img style="display: inline-block; width: 100%; object-fit: cover;" src="https://lh3.googleusercontent.com/sTLOdKpDs5IGGBLvRdQjmOnAuA5oFValN9ke0obKBQnJcuqXNqDYz636a1VRbcf-7Q_MYnE3xekf1pfF1PuHYRM9yltHWLsdqAAQC9j9l1yVSuus_RYxq9iRRJxOhrWJh65tOgeBeA=w2400" alt="na" /></p>

<h2 id="conclusion">Conclusion</h2>

<p>It’s always a good and conflicts free practice to create virtual environment for each Python project. You cannot be wrong to be conservative.</p>

<p>There are also a lot of tools out there to help create and manage virtual environments for you. But we’d like to have a touch on the basic and keep it as simple and straigth forward as possible.</p>

<p><br /></p>]]></content><author><name>Larry</name></author><category term="Python" /><summary type="html"><![CDATA[This post is based on a Youtube video by teclado, which I belive, is the clearest explanation of virtual environment for python available online.]]></summary></entry><entry><title type="html">按揭利率和每期供款</title><link href="http://localhost:4000/new-blog/y2023/2023/01/15/mortgage.html" rel="alternate" type="text/html" title="按揭利率和每期供款" /><published>2023-01-15T00:00:00+00:00</published><updated>2023-01-15T00:00:00+00:00</updated><id>http://localhost:4000/new-blog/y2023/2023/01/15/mortgage</id><content type="html" xml:base="http://localhost:4000/new-blog/y2023/2023/01/15/mortgage.html"><![CDATA[<p><img style="display: inline-block; width: 100%; object-fit: cover;" src="https://lh3.googleusercontent.com/oO7ZCe-7kAXfn58XEB7iNRFNc9N5k2TPmEW5ciFaWSmGX9nIFOtzLUVzxO2cI1Isk0hmoRHY20c4w83y-QI4HGOEwRDMzbdSrYfPkCmSHk3B_NUWO_lMBw_JuBLy07EgmHDmMa9Baw=w2400" alt="ba" /></p>

<p><br /></p>

<p>我一直以为房贷按揭利率和每期供款的算法，是人尽皆知的常识。最近偶遇网友，才发现绝大部分人其实对银行是怎么算账，怎么从他们身上赚按揭利息的，基本搞不清楚。鉴于咱不能让银行挣了钱，还被人挣得稀里糊涂，我叔决定一次把这个问题讲透。</p>

<h3 id="资金的时间成本">资金的时间成本</h3>

<p>资金是有时间成本的，问人借钱，到期除了还本之外，还要支付利息，这利息就是资金的时间成本。</p>

<p>同样道理，如果你把钱存在银行，就相当于把钱借给了银行，存款到期，银行就得给你支付利息。</p>

<p>时间成本有高有低，对应表现就是利率的不同。如果按年利率 12%计算，你今天存到银行或借给朋友 100 元，一年后对方就应该还本付息 112 元。</p>

<h3 id="复利和连续复利">复利和连续复利</h3>

<p>利息看似简单，但在银行这里，就会有很多弯弯绕。跟居民切身利益最相关的房贷按揭中，简单的利息却有相当复杂的算法。</p>

<p>跟通常认为的最大一个区别是利息的分摊。银行在计算按揭利息的时候，从来不直接用年利率，而是分摊到月，按月利率复合计算。这样一来，借款人实际承担的年利率，就要比名义利率高。</p>

<p>这是怎么来的呢？我们按年利率 12%来举个例子。</p>

<ul>
  <li>通常理解，年利率就按年来算，所以到年底连本带利应该是： $100 \times (1+12\%) = 112$ 元。</li>
  <li>按揭做法，年利率分摊到月，月息就是$12\% / 12 = 1\%$，每月计一次，连续计算 12 个月，年底按复利收息： $100 \times (1+1\%)^{12} = 112.68$ 元。</li>
</ul>

<p>这样做的结果，就是银行实际的利率不是 12%，而是 12.68%。小伙伴可不要小看这 0.68%的差别，据我叔拍脑袋估计，工农中建交这 5 家的个人住房按揭贷款总量就突破 20 万亿，这每一个基点的利率差异，就是巨量的利润！</p>

<h3 id="现值和未来值">现值和未来值</h3>

<p>这些个名词有点拗口，但只要了解意思，其实都是很直白的概念。</p>

<p>现值就是资金在今天的价值，你存银行 100 元也好，还是从银行借 100 元也好，100 元在今天就值 100 元。</p>

<p>未来值是说今天这 100 元到一年后的价值，这里就必须考虑利息，按上面的举例，今天的 100 元就相当于一年后的 112 元。</p>

<p>那你要是问，这今天的 100 元，和一年后的 112 元，那个更值钱？不考虑通胀因素，我们说今天的 100 元，从价值上就等于一年后的 112 元。换个角度说，同样的 100 元，今天就到手的 100 元，就比一年后才能到手的 100 元要值钱，因为今天的 100 元，比起一年后多出了一个赚利息的机会，这就叫现金的<strong>时间价值</strong>。</p>

<p>所以，父母如果跟孩子说，压岁钱先帮你存起来，以后再给你，本质上就是无偿占用了压岁钱的时间价值。我家小孩还不懂现值和未来值的区别，等他有机会看了这篇文章，下回估计就要跟他妈好好讨论压岁钱的保管问题了。</p>

<h3 id="净现值">净现值</h3>

<p>现在我们假设银行永不破产、也不会违约，到期就支付 12%的利息，在这个前提下，我们来聊聊净现值的算法。</p>

<p>假设你现在手里有 100 万元，想投资个项目。谁都知道投资做生意不容易，劳心劳力，还要承担经营风险。不用多想，你就能明白，这投资买卖如果不能给你带来超过 12 万元的收益，你不如把钱存银行，一年啥都不干，旱涝保收 12 万利息。收益超过 12 万，比方说有 20 万，才算是投资挣到钱了。</p>

<p>按行业惯例，我们需要把一年后连本带利收回的钱，都按银行利率折算到今天，看一年后的 120 万元，相当于今天的多少钱？我们这里还是用银行的年利率 12% 来折算。</p>

<p>$$
\begin{align<em>}
x \times (1+12 \%)
&amp;= 1,200,000 <br />
x &amp;= 1,200,000 / (1+12\%) <br />
x &amp;= 1,071,429
\end{align</em>}
$$</p>

<p>好了，我们现在知道，一年后的 120 万元，相当于今天的 1,071,429 元。这个数，要多过今天你实际手里的 100 万元，这个多出来的 71,429 元，就是净现值。净现值为正，说明投资收益好过银行存款，这买卖从经济上值得干（这里我们不考虑做生意的风险和心力付出，虽然我叔也同意，辛苦一年才多挣不到 8 万，似乎不太值当）。</p>

<p>有小伙伴要问了，我可不可以不算净现值，而都按到期回本多少，来计算挣不挣钱？我挣了 20 万，比存银行吃利息多了 8 万，那算 8 万为净到期收益，岂不是更直观？诶，要是这么提问题就非常好，说明你动脑子了！</p>

<p>为回答这个问题，我们假设另一种情况：这笔投资不是一次回本，而是分成两年收回，其中第一年底收回 60 万，第二年底再收回 60 万。那么我问你，怎么算比较收益？</p>

<p>实际上都可以算，但终归你要选定一个时间点，把所有与投资相关的进项出项都折到这个时间点来比较。我们通常都选现在这个时间点，用净现值去评判任何一个项目的投资收益，是考虑到任何投资的未来收益，正常来说不会只有一次回本的时机，通常都是分布到未来若干年，逐步分期回收。选未来任何一个时间点，都不如直接选今天方便。因为选今天，马上就可以算出来一个净现值，从而判断这个投资项目是挣钱还是亏钱。</p>

<p>回到上面的二次回本的情况，我们不妨继续应用复利的公式，来算一下这种情况下的净现值。这里我们用 NPV (Net Present Value) 来表示净现值。</p>

<p>$$
\begin{align<em>}
NPV &amp;= \frac{600,000}{1+12\%} + \frac{600,000}{(1+12\%)^2} - 1,000,000 <br />
&amp;= 535,714 + 478,316 - 1,000,000 <br />
&amp;= 14,030
\end{align</em>}
$$</p>

<p>小伙伴发现没，虽然你收回的投资还是 120 万没变，但是因为你有一半需要等到第二年年底才能收回，通俗地说，两年后的钱比今天不值钱，所以才会导致净现值跌了这么多。</p>

<p>影响净现值的两个因素，其中之一就是上面举例的回收周期。接下来讲另一个，折现利率。</p>

<p>我们继续用上面的例子，但这回银行利率变了，不再是 12%，而是 6%：</p>

<p>$$
\begin{align<em>}
NPV &amp;= \frac{600,000}{1+6\%} + \frac{600,000}{(1+6\%)^2} - 1,000,000 <br />
&amp;= 566,038 + 533,998 - 1,000,000 <br />
&amp;= 100,036
\end{align</em>}
$$</p>

<p>很明显，银行的利率给的越低，投资回报的相对收益就越高。如果你是用自己的积蓄做买卖，银行利率低意味着你可以躺赢的钱就少了，如果你是用贷款融资做买卖，银行利率低意味着你需要支付的资金成本也低了，两者都表示说做生意的相对回报提高了。</p>

<div class="warning">
<p class="content">
投资的回报周期各有不同，没法统一调节，但利率是银行定的，非常容易调整。所以你看，无论是美联储也好，还是中国人民银行也好，要想影响经济活动都会考虑调整利率的手段。经济太旺要压一压，加息，增加市场上的资金成本，让投资项目的净现值降下来，大家就不愿意去做生意了；经济疲软要刺激一下，减息，降低资金成本，让投资项目的净现值上去，大家发现投资能挣到钱了，纷纷去做生意。
</p>
</div>

<p><br /></p>

<h3 id="内部收益率">内部收益率</h3>

<p>是谁想出来这么个莫名其妙的词汇？这个词来源于英文 Internal Return Rate，但我叔发现这个词无论中英文都有点不着调，讲白了，就是项目的投资收益率，跟内不内部没啥关系。有小伙伴一定要给我解释内部是啥意思，打住！我知道你要说什么，但是，我就是觉得不贴切。</p>

<p>内部收益率的算法，最好的说明不如举例子，我们用一年回报 120 万，和两年回报 120 万，分别来算一下。为书写方便，我们用$r$表示内部收益率。</p>

<p>第一个例子的方程式如下：</p>

<p>$$
\begin{align<em>}
1,000,000 &amp;= \frac{1,200,000}{1+r}<br />
1+r &amp;= \frac{1,200,000}{1,000,000}<br />
r &amp;=20 \%
\end{align</em>}
$$</p>

<p>所以，第一个例子中，内部收益率就是 20%。</p>

<p>第二个例子的方程式如下：</p>

<p>$$
\begin{align<em>}
1,000,000 &amp;= \frac{600,000}{1+r} + \frac{600,000}{(1+r)^2} <br />
r &amp;= 13.066\%
\end{align</em>}
$$</p>

<p>第二个例子中，内部收益率就是 13.066%。</p>

<h3 id="银行按揭的算法">银行按揭的算法</h3>

<p>上面讲了这么多铺垫内容，终于到了正题环节，咱开聊按揭的算法。</p>

<p>假设你现在看中了一套房，想从银行办个 120 万人民币，10 年期的按揭贷款，目前银行的贷款利率比较优惠，只有年化 4.8%。</p>

<p>银行销售一定会给你提供两种还款方案，一种叫等额本金，另一种叫等额本息。银行小姐姐会给你比较两种方案各自的利弊，但咱今天要搞点硬核的内容，所以抛开文字表述，直接用数字来说明两者的区别。</p>

<p><br /></p>

<h4 id="等额本金">等额本金</h4>

<p>谈等额本金，前面我们介绍的那些复利的概念就完全没有用武之地了，因为<strong>等额本金不算复利</strong>。</p>

<p>你的还款周期是 120 个月，所以每个月的本金还款额就是 1 万，这是等额本金这种按揭方式的命名来源。</p>

<p>等额本金的利息怎么算？按未清偿的贷款余额为基础，以月息为利率，每个月算一次。第一个月底，你的欠款是 120 万，你需要支付的利息是：</p>

<p>$$
\begin{align<em>}
利息 &amp;= 1,200,000 \times (4.8\% / 12) <br />
&amp;= 1,200,000 \times 0.4 \% <br />
&amp;= 4,800
\end{align</em>}
$$</p>

<p>所以你第一个月的还款总额是 1 万本金加上 4800 元的利息，总计 14800 元。第二个月底，因为本金只有 119 万，所以上面的利息计算公式就应当以 119 万为基数。</p>

<table>
  <thead>
    <tr>
      <th style="text-align: right">期数</th>
      <th style="text-align: right">本金</th>
      <th style="text-align: right">利息</th>
      <th style="text-align: right">合计</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: right">1</td>
      <td style="text-align: right">10000</td>
      <td style="text-align: right">4800</td>
      <td style="text-align: right">14800</td>
    </tr>
    <tr>
      <td style="text-align: right">2</td>
      <td style="text-align: right">10000</td>
      <td style="text-align: right">4760</td>
      <td style="text-align: right">14760</td>
    </tr>
    <tr>
      <td style="text-align: right">3</td>
      <td style="text-align: right">10000</td>
      <td style="text-align: right">4720</td>
      <td style="text-align: right">14720</td>
    </tr>
    <tr>
      <td style="text-align: right">…</td>
      <td style="text-align: right">…</td>
      <td style="text-align: right">…</td>
      <td style="text-align: right">…</td>
    </tr>
    <tr>
      <td style="text-align: right">120</td>
      <td style="text-align: right">10000</td>
      <td style="text-align: right">40</td>
      <td style="text-align: right">10040</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<h4 id="等额本息">等额本息</h4>

<p>等额本息的算法就稍微复杂一点，但原理跳不出上面的介绍。顾名思义，等额本息的借款人，在贷款期限内，每期还款给银行的金额是相等的。</p>

<p>至于每期应当还款多少？就需要把上面介绍的计算投资项目净现值的公式反过来用，简单说就是每期还款全部按按揭利率（月利率）折现到放款那天，刚好等于银行的放款总额，公式如下：</p>

<p>$$
\begin{align<em>}
1,200,000 = \frac{pmt}{1+0.4\%} + \frac{pmt}{(1+0.4\%)^2} + \cdots + \frac{pmt}{(1+0.4\%)^{120}}
\end{align</em>}
$$</p>

<ul>
  <li>每月还款额（月供）我们用 PMT 表示，就是英文 Payment 的缩写。</li>
</ul>

<p>上面的方程式是个等比数列，我们可以在方程式两边都乘以等比比例$\frac{1}{1+0.4\%}$，得到一个新的等式，</p>

<p>$$
\frac{1,200,000}{1+0.4\%} = \frac{pmt}{(1+0.4\%)^2} + \frac{pmt}{(1+0.4\%)^3} \cdots + \frac{pmt}{(1+0.4\%)^{121}}
$$</p>

<p>然后我们把上下两个方程式相减，右边就可以消去中间的 118 项，只留头尾两项，</p>

<p>$$
1,200,000 - \frac{1,200,000}{1+0.4\%} = \frac{pmt}{1+0.4\%} - \frac{pmt}{(1+0.4\%)^{121}}
$$</p>

<p>整理合并一下，我们就得到 $pmt$ 的计算公式如下：</p>

<p>$$
\begin{align<em>}
pmt &amp;= \frac{1,200,000 \times (1+0.4\%)^{120} \times (0.4\%)}{(1+0.4\%)^{120} -1} <br />
&amp;= 12,610.87
\end{align</em>}
$$</p>

<div class="note-pink">
<p class="notetitle">等额本息的算法到目前还算正常，但接下来银行算利息的方式，我叔认为就属于骚操作了。</p>
</div>
<p><br /></p>

<p>小伙伴看了上面月供的计算过程，是不是认为第$n$个月的本金和利息分配，应该是这样的：</p>

<ul>
  <li>本金=$12,610.87 / (1+0.4\%)^n$；</li>
  <li>利息=$12,610.87 -$ 本金</li>
</ul>

<p><strong>No!!!</strong> 其实是这样的：</p>

<ul>
  <li>第一个月的利息= $1,200,000 \times 0.4 \% = 4,800$</li>
  <li>第一个月的本金= $12,610.87 - 4,800 = 7,810.87$</li>
</ul>

<p><br /></p>

<ul>
  <li>第二个月的利息= $(1,200,000 - 7,810.87) \times 0.4 \% = 4,768.76$</li>
  <li>第二个月的本金= $12,610.87 - 4,768.76 = 7,842.11 $</li>
</ul>

<p><br /></p>

<ul>
  <li>往后月份，以此类推…</li>
</ul>

<p><br /></p>

<p>小伙伴看明白上面的算法思路了吗？</p>

<p>等额本息方式下，银行按复利计算总利息，但在月供时，却按本金余额统计利息和本金的分配比。由于前期等额本息的月供款金额少，所以相对本金清偿部分就更少，让后面的利息收入持续在更高的基数上计算！</p>

<table style="margin-left: auto; margin-right: auto; text-align: right;">
  <tr><th>期数</th>   <th>本金</th>   <th>利息</th> <th>合计</th></tr>
  <tr><td>1</td>      <td>7,810.87</td>       <td>4800</td> <td>12,610.87</td></tr>
  <tr><td>2</td>   <td>7,842.11</td>       <td>4,768.76</td> <td>12,610.87</td></tr>
  <tr><td>3</td>   <td>7,873.48</td>       <td>4,737.39</td> <td>12,610.87</td></tr>
  <tr><td>...</td>   <td>...</td>       <td>...</td> <td>...</td></tr>
  <tr><td>120</td>   <td>12,560.62</td>       <td>50.25</td> <td>12,610.87</td></tr>
</table>

<p><br /></p>

<div class="note-pink">
<p class="notetitle">总结一下，采用等额本息对银行有两个好处：</p>
<p class="notecontent">
◆ 按复利计息，借款人需要向银行实际支付比表面利率更高的利息；
</p>
<p class="notecontent">
◆ 前期还款更多计为利息，使借款人的贷款余额始终比等额本金高，在提前还贷或利率调升时，有利银行，不利借款人。
</p>
</div>

<p><br /></p>

<p>有小伙伴要问了，那是不是利率调降时，就对等额本息借款人比较有利呢？</p>

<p>呃…</p>

<p>利率调降时，难道就你降，等额本金的借款人不降？人家前面付的利息没你多，后面剩的本金比你少，你说你是不是亏大了？</p>

<h3 id="后续">后续</h3>

<p>我叔从网上找了一个按揭贷款计算器，链接放在下方，有需要的小伙伴可以自己算算。</p>

<p>这里需要说明一下，这个是国外网站做的，所以有保险、CPI 和管理费这些选项，咱国内不适用，就直接选 0 即可，不影响最终的计算结果。</p>

<p><br /></p>

<div>
<p align="center"><a href="https://www.mortgagecalculator.org/"><img src="https://www.mortgagecalculator.org/images/mortgage-calculator-logo.png" alt="MortgageCalculator.org" border="0" style="max-width: 60%;" target="_blank" /></a></p>

<iframe src="https://www.mortgagecalculator.org/webmasters/?downpayment=50000&amp;homevalue=300000&amp;loanamount=250000&amp;interestrate=4&amp;loanterm=30&amp;propertytax=2400&amp;pmi=1&amp;homeinsurance=1000&amp;monthlyhoa=0" style="width: 100%; height: 1200px; border: 0;"></iframe>

</div>

<p><br /></p>]]></content><author><name>Larry</name></author><category term="Y2023" /><category term="Finance" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">香港，再见！</title><link href="http://localhost:4000/new-blog/y2023/2023/01/04/leave.html" rel="alternate" type="text/html" title="香港，再见！" /><published>2023-01-04T00:00:00+00:00</published><updated>2023-01-04T00:00:00+00:00</updated><id>http://localhost:4000/new-blog/y2023/2023/01/04/leave</id><content type="html" xml:base="http://localhost:4000/new-blog/y2023/2023/01/04/leave.html"><![CDATA[<p><img style="display: inline-block; width: 100%; object-fit: cover;" src="https://lh3.googleusercontent.com/UUIcpZ5gwe1h_NmigNZ_N0DH9l2Cf0oqJoK3zqkpdO6xt76ejYoaIu3bVRuw8uflm9NzpaNjMpcAtPa-6rkjolu9pcbfyedhJYWG2VnvTqLR4jIsRaHfQW2qMRq2qodQf5JTyRcprg=w2400" alt="HK" /></p>

<p><br /></p>

<p>穿过这道门，飞 12 个小时，我就要去到一个陌生的城市，开始人生的下一段旅程了。</p>

<p>再见了，香港！</p>

<p>从 2021 年初移居香港，其实我已经在这里长住快两年了。而在这之前的三年，我每周末往来广州香港两地。前后差不多总计五年，我和我的家人一起，用足迹丈量了这个城市的各个热点，留下了许多美好的回忆。</p>

<p>在一个城市呆久了，尤其跟家人一起的时光，会镌刻到记忆深处，让人念念不忘。这不，我还在香港机场，就开始想念这个城市的角角落落了。</p>

<p>在跑马地，有我最后半年最常去的 Pacific Coffee。基本每天，我都会抱着电脑在那里学习，每个店员都认识我，以至于我一进到店里，不用我开口点单，店员就会立刻开始为我准备 grande 热美式。</p>

<p>跑马地还有我常去吃中饭的两家饭店，一家在邮局对面，叫 同芯咖啡（Date Cafe），他家的虾球滑蛋是我的最爱，而且还有免费的罗宋汤。后来在马场边上新开了一家店，叫牛奶冰室，他家的菜品比较丰富，后来我就去的更多一点。常点的两道菜，一个是番茄牛肉打蛋，另一个是酸菜鱼，配上加冰的零度可乐，我能从去年夏天一直吃到整个冬天都吃不腻。</p>

<p>当然，在跑马地还有一家著名的老字号茶餐厅，叫祥兴咖啡厅，他家的菠萝包和蛋挞是招牌。</p>

<p>我们另一个常去的地方是铜锣湾，从跑马地坐 30 路小巴到终点就是。其实铜锣湾离跑马地不远，不赶时间的时候，我们也经常从马场边上走过去。</p>

<p>在疫情前，我们去铜锣湾的次数很多，主要是因为经常周末去看新上的电影。那会儿在时代广场 13 层，UA Cinemas 经营着好几块屏幕，我们在那里看了好多 Marvel 的大片，还有其它奇奇怪怪的影片我都不记得名字了。来香港看电影，最大的感受是这里很少有 3D，大片都是 2D 为主。别以为我这么说是嫌弃 2D，恰恰相反，国内的 3D 都是黑乎乎脏兮兮，我深恶痛绝，来香港后才发现原来电影可以这么色彩明快鲜亮。</p>

<p>铜锣湾还有一个苹果专卖店，我们倒是不常去逛，不过我们在那家店里买过不少东西，也报修过两次 Mac，两次 iPad。就两个字，方便。</p>

<p>铜锣湾还有不少好吃的馆子，有些就在时代广场楼上，有些在 SOGO 旁边，还有不少散落在各条街上。对了，有一家肉夹馍店特别对碳水爱好者胃口，就在 Hysan 广场对面的小巷子里。我是一个比较懒的人，所以铜锣湾的馆子，还是我媳妇带着我们去的次数多。</p>

<p>对了，时代广场 9 楼有一家星巴克，我 10 次去铜锣湾，基本上 5 次都要去那儿坐一会儿。咖啡当然要喝，其实另一个吸引我的地方，是星巴克边上有一家卖北海道牛奶冰淇淋的，后来我差不多每次必点。</p>

<p>说完了吃，就要聊聊运动。</p>

<p>香港的一大特色是有丰富的郊野公园和行山径。我们一家先后走完了港岛的 Hong Kong Trail，从西贡一路延伸到九龙的 Maclehose Trail。而麦理浩径中的第二段，因为要去到大浪湾，又要翻过山，最后在一个三面环山的码头作为终点，景色特别秀美，是我们一再重复的走线。</p>

<p>在 2022 年，小朋友和他妈妈还一起走完了位于大屿山（Lantau Island）凤凰径 Pheonix Trail，我可能是因为考试还是啥的，没有陪着全部都走一遍。但是，我参加的其中一次，却是全程最惊险的。那一天的路线，要去到凤凰顶（ Lantau Peak），一路上山都是跟着大部队走，小朋友一路小跑，我跟他妈累的口吐白沫，几次休整，但总体是跟着众多驴友一路，无惊无险。登顶下山时，他妈妈不知哪看的路线，给指了一条野路。从下山 10 米开始，就一路险情不断，到了一个沙土陡坡，我们都脚底打滑，根本没法站立，所幸路边的野草很厚很软，我们坐在草上才能滑下去，但裤子都磨破了。一开始，我们还在抱怨这政府咋回事，这么著名的凤凰径也不好好休整一下，让市民怎么安全出行。但后面越走越不对劲，最后下到山下经书林，才发现我们全程都走错了！</p>

<p>哎，小宝妈妈还说抱歉，要带着我们重新走一遍，这下也不知道什么时候才能成行了。</p>

<p>大屿山还有一条特别的行山径，就是从东涌地铁站附近开始的东涌古道，全程基本在海边山路上蜿蜒前行，路上能看见港珠澳大桥，还会穿过若干村落，有各种农家果树和花卉，还有各种路边茶饮歇脚的士多店。小宝妈妈最喜欢的是行至中途的一家豆花店。东涌古道的终点是一个非常有特色的村落，好多人家的房子都一半在陆地上，另一半打桩在河底，所以沿着河看过去，两边不是堤岸，而是两排木制村屋，然后还有快艇带着游客从河道中间突突突地开过。</p>

<p>偶尔小宝妈妈也会带着我们去离岛玩，其中最常去的就是南丫岛（Lamma Island）。岛上各种卖海产品的，还有各种酒吧、甜品店，但最著名的，应该是走线终点的海鲜饭店。去南丫岛吃海鲜的说法，我怀疑说的就是这海鲜饭店。当然，如果我们走西贡的麦理浩径，我们下来后也常常去西贡码头吃海鲜，同样新鲜美味。只不过我们在 2021 上半年就走完麦理浩径了，所以后来很少去西贡码头吃海鲜。</p>

<p>到了 2022 年，小宝妈妈比较忙，再加上疫情影响，就比较少出去岛外。但是运动还是不能少啊，所以一般我们都在跑马地的后山走走。2022 年上半年，我跟小宝运动多，下半年我跟小宝妈妈运动多，小宝打球多，就不爱再上山了。</p>

<p>我们住的地方，其实从跑马场往上已经有一站地，所以出门右转没多远就上山了。主要有两条路线，一条是从蓝塘道到加油站，然后上阳明山庄，主要是小宝和我走的多。夏天的时候，我们走到阳明山庄，然后去山庄的 fusion 超市买个西瓜，打车回家吃瓜；另一条是去到相反方向的宝云道，一直走到湾仔峡道路口，主要是小宝妈妈和我走的多，小宝当然也一起走过。到了宝云道和湾仔峡道路口，可以选择折返，也可以继续往上朝警察博物馆方向去。因为往上走坡陡路急，十分累人，小宝妈妈经常偷懒，我倒是觉得很有挑战。另外，还有宝云道上的 monkey bar，我跟小宝妈妈在 2022 年冬天的时候，每次走宝云道路过都要练上一练。老同事天天伏案工作，确实有必要加强一下上肢力量训练，预防肩周炎。</p>

<p>香港有很多好玩的、好吃的地儿，你要是一直待在这座城市，可能会觉得稀松平常，可一旦离开后，反而那些最平常的事物，却是最打动人心，让人念念不忘。</p>

<p>可能多年后回看，过去这几年就是我跟香港的全部缘份。今后也许再见，也许再也不见，我都会感谢这座城市，让我跟家人渡过了一段难忘的时光，也感谢这座城市曾经包容和接纳过我。</p>

<p><br /></p>]]></content><author><name>Larry</name></author><category term="Y2023" /><category term="Life" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Bucket Sort</title><link href="http://localhost:4000/new-blog/2022/12/09/bucketSort.html" rel="alternate" type="text/html" title="Bucket Sort" /><published>2022-12-09T00:00:00+00:00</published><updated>2022-12-09T00:00:00+00:00</updated><id>http://localhost:4000/new-blog/2022/12/09/bucketSort</id><content type="html" xml:base="http://localhost:4000/new-blog/2022/12/09/bucketSort.html"><![CDATA[<p>This post is based on <a href="[https://www.geeksforgeeks.org/radix-sort/">Geeksforgeeks</a> and <a href="https://www.javatpoint.com/bucket-sort">Javapoint</a>.</p>

<p>Bucket sort is mainly useful when input is uniformly distributed over a range. By custom, this range usually is from 0 to 1.</p>

<p>For example, consider the following problem:</p>

<p>Sort a large set of floating point numbers which are in range from 0.0 to 1.0 and are uniformly distributed across the range. How do we sort the numbers efficiently?</p>

<p>A simple way is to apply a comparison based sorting algorithm. But they cannot do better than $O(n \log n)$. Can we sort the array in linear time? Counting sort can not be applied here as we use keys as index in counting sort. Here keys are dsicrete floating point numbers.</p>

<p>The idea is to use bucket sort.</p>

<blockquote>
  <p>Bucket sort is a sorting algorithm that separate the elements into multiple groups said to be buckets. Elements in bucket sort are first divided into groups called buckets, and then they are sorted by any other sorting algorithm. After that, elements are gathered in a sorted manner.</p>
</blockquote>

<p>The basic procedure of performing the bucket sort is given as follows:</p>

<ul>
  <li>First, partition the range into a fixed number of buckets.</li>
  <li>Then, toss every element into its appropriate bucket.</li>
  <li>After that, sort each bucket individually by applying a sorting algorithm.</li>
  <li>And at last, concatenate all the sorted buckets.</li>
</ul>

<p><strong>Note:</strong> step 3 above is not necessarily to carried out separately after step 2. In fact, if you choose insertion sort, the sorting work can be done at the same time as you toss an element into the corresponding bucket.</p>

<p><strong>Pros</strong></p>

<ul>
  <li>Bucket sort greatly reduces the no. of comparisons by dividing elements into small groups (buckets).</li>
</ul>

<p><strong>Cons</strong></p>

<ul>
  <li>Becasue it is not an in-place sorting algorithm, it needs some extra huge memory space when comes to large array. So it’s costly in terms of space.</li>
</ul>

<p><strong>Illustration of Bucket Sort on Floating Numbers</strong></p>

<p>In fact, we will let the number of buckets (n) be as many as the array length. The benefit of this practice is, if the array is uniformly dispersed, then element would fit into buckety quitely evenly, passing less job for further sorting within each bucket.</p>

<p><img style="display: inline-block; width: 90%; object-fit: cover;" src="https://lh3.googleusercontent.com/ASopf72CgyON9UB_RtI0RVUFaCs_ZpMwpXfL1bedu-DEN3dBPX8D5QNW3Dj4_xo1fT6YpL7rJ9x63lXxC7UH7g7DPj8_prNh9qOir6l-jLm7eH7VT6n_3sauQGnUVIt7DDz4fIshuA=w2400" alt="bucket sort" /></p>

<p><br /></p>

<p>As you can see from the above illustration, the auxilliary bucket array is the same length as the original array.</p>

<p><strong>Illustration of Bucket Sort on integers</strong></p>

<p>Of course, bucket sort can also be used to integers, in which case, we can choose a bucket number as we see most adapted to the given array.</p>

<p>Given an array $[10,8,20,7,16,18,12,1,23,11]$. Based on the maximum number, we can roughly create buckets with a range from 0 to 25. The buckets range are 0-5, 5-10, 10-15, 15-20, 20-25. Elements are inserted in the buckets according to the bucket range. Suppose the value of an item is 16, so it will be inserted in the bucket with the range 15-20. Similarly, every item of the array will insert accordingly.</p>

<p>The following phase is known to be the <strong>scattering of array elements</strong>.</p>

<p><img style="display: inline-block; width: 80%; object-fit: cover;" src="https://lh3.googleusercontent.com/ZxR8hC9IcynnX9QgSZAxtMmWg9LTMMR52OFVHgYcVSQtYYe8tjxxA9CgoQ51Keu__gj-hzZ-G86JJSZ9PFLxyZHpB0qxNTLg7cjFaYElCZu05MW9qIahfsuYny1Nwx2J8-No1c-6eQ=w2400" alt="bucket sort" /></p>

<p><br /></p>

<p>Now, sort each bucket individually. The elements of each bucket can be sorted by using any of the sorting algorithms.</p>

<p><img style="display: inline-block; width: 80%; object-fit: cover;" src="https://lh3.googleusercontent.com/zoPLwL9xGG2CsWxsoF0zDeBwrT6bQhkPhAvVqb1w0_63THJw9b4xGnWnOpee1Qn2qGJCuDhR5_A729ZOZsTqS45G9HKDguJYXYn_jmX50bZnUJZi_kqmrTubWUrqHhiQrB6WPLPOLg=w2400" alt="bucket sort" /></p>

<p><br /></p>

<p>At last, gather the sorted elements from each bucket to complete the sort.</p>

<p><strong>Time Complexity</strong></p>

<ul>
  <li><strong>Best Case Complexity</strong> - It occurs when there is no sorting required at bucket level, i.e. the array is already sorted. The best-case time complexity of bucket sort is $O(n + k)$. $k$ here is the bucket number.</li>
  <li><strong>Worst Case Complexity</strong> - In bucket sort, worst case occurs when the elements are of the close range in the array, because of that, they have to be placed in the same bucket. So, some buckets have more number of elements than others. As we have no good way than comparison-based algorithm to sort elements in a bucket, in the worst-case time complexity of bucket sort is $O(n^2)$.</li>
</ul>

<p><br /></p>]]></content><author><name>Larry</name></author><category term="Algorithms" /><summary type="html"><![CDATA[This post is based on Geeksforgeeks and Javapoint.]]></summary></entry><entry><title type="html">Counting Sort</title><link href="http://localhost:4000/new-blog/2022/12/09/countingSort.html" rel="alternate" type="text/html" title="Counting Sort" /><published>2022-12-09T00:00:00+00:00</published><updated>2022-12-09T00:00:00+00:00</updated><id>http://localhost:4000/new-blog/2022/12/09/countingSort</id><content type="html" xml:base="http://localhost:4000/new-blog/2022/12/09/countingSort.html"><![CDATA[<p>This post is based on two posts by <a href="https://www.geeksforgeeks.org/counting-sort/">Geeksforgeeks</a> and <a href="https://www.interviewcake.com/concept/java/counting-sort">interviewcake</a>.</p>

<p>First thing first, what’s counting sort?</p>

<blockquote>
  <p>Counting sort is a sorting technique based on keys between a specific range. It works by counting the number of objects having distinct key values (a kind of hashing). Then do some arithmetic operations to calculate the position of each object in the output sequence.</p>
</blockquote>

<p><br /></p>

<p><strong>Characteristics of counting sort:</strong></p>

<ul>
  <li>Counting sort makes assumptions about the data, for example, it assumes that values are going to be in the range of 0 to 10 or 10 – 99, etc, Some other assumption counting sort makes is input data will be all real numbers (or some items like inventory stocks that can be represented by real numbers).</li>
  <li>Unlike other algorithms this sorting algorithm is not a comparison-based algorithm, it hashes the value in a temporary count array and uses them for sorting. Because of this characteristic, counting sort runs in $O(n)$ time, making it asymptoticaly faster than comparison-based sorting algorithms like <a href="https://larry-cui.github.io/quicksort">quicksort</a> or <a href="https://larry-cui.github.io/mergesort">mergesort</a>.</li>
  <li>It uses a temporary array making it a non-<a href="https://www.geeksforgeeks.org/in-place-algorithm/">In Place algorithm</a>.</li>
</ul>

<p><br /></p>

<p><strong>Weaknesses:</strong></p>

<ul>
  <li>Restricted inputs. Counting sort only works when the range of potential items in the input is known ahead of time.</li>
  <li>Space cost. As this algorithm will use a counting array to store elements for further sorting, it uses up extra memory space. If the range of potential values is big, then counting sort requires extra double space as that of the original array.</li>
</ul>

<p><br /></p>

<p><strong>Illustration of Counting Sort:</strong></p>

<p>The algorithm can be divided into two parts, first, we count how many times each item occurs, then we build the sorted output.</p>

<p><strong>Counting</strong>
Say we have this array, and we know all numbers in the array will be non-negative integers less than or equal to 10:</p>

<p><img style="display: inline-block; width: 90%; object-fit: cover;" src="https://lh3.googleusercontent.com/LdIGhQoI61T7g1I-wYZY7t8bfqORyPBr81t7SvgieT0D_ZX4whFU8fRTEbCQbU8mDZlbpEy4n0YlTwLScVP02PDqkUFL7IJ2HaW6kgx8wH5m5UNpBY_y41j2vQ6i3yAQLgfTVfCP4A=w2400" alt="counting sort" /></p>

<p><br /></p>

<p>The idea is to count how many 0’s we see, how many 1’s we see, and so on. Since there are 11 possible values, we’ll use an array with 11 counters (elements), value to which are all initialized to 0.</p>

<p><img style="display: inline-block; width: 90%; object-fit: cover;" src="https://lh3.googleusercontent.com/ZShvxG9iwsrPc4g-AkR6rBxabAPvjpExU8txnObMxkB-jdFTG9ov_cBgwN87IlPSGeX46cYNuqlJ-FcqQHA88J90JAgKUIQnMMMfvtuzwWLihN_Tfn0_4pz3OWypv4lhyMkV8GHpCQ=w2400" alt="counting sort" /></p>

<p><br /></p>

<p>We’ll iterate through the input once. The first item is a 4, so we’ll add one to counts[4]. The next item is an 8, so we’ll add one to counts[8].</p>

<p><img style="display: inline-block; width: 90%; object-fit: cover;" src="https://lh3.googleusercontent.com/_S9Mjvm061B3aDn272OmKH4n2dGAWPZIueOdyuGnmEyQQUDdV6uWzCgYhxGCa7fa3rpM6M81sr_taOpRhfPdfO0MIFH0qPGN0Lxzh4YmB-lj_w5s-Lb6VdALoPYNvuu3RhjBdjoBaQ=w2400" alt="counting sort" /></p>

<p><br /></p>

<p>And so on. When we reach the end, we’ll have the total counts for each number:</p>

<p><img style="display: inline-block; width: 90%; object-fit: cover;" src="https://lh3.googleusercontent.com/IEnnYlLUTZn4UsFpJCvZc0VWvlgyorPWgNFzj1jIQjocA-u7Y9fDm4gfIGn8osg4rcKhI8l3RMr9trc1aW0IIo5bbJZsCv9WEg0nttualRI_fNZaI1gam-mDrOzcBm77FrI7HAcjpQ=w2400" alt="counting sort" /></p>

<p><br /></p>

<p><strong>Building</strong></p>

<p>Now that we know how many times each item appears, we can fill in our sorted array. Looking at counts, we don’t have any 0’s or 1’s, but we’ve got two 2’s. So, those go at the start of our sorted array.</p>

<p><img style="display: inline-block; width: 90%; object-fit: cover;" src="https://lh3.googleusercontent.com/uE8o7vwQmAJ7reXZcp3NT4MhL_6pYiN-HitvdTeODj7qo0NijR0WcT9ETNfqXsMYGv9Q6SE2HlMl44oEARZwZSlwZwwoFNl1VYaZpDsfcU16X51mBFSUuRuWyrc1meO_P4cKWwc49Q=w2400" alt="counting sort" /></p>

<p><br /></p>

<p>No 3’s, but there are two 4’s that come next.</p>

<p><img style="display: inline-block; width: 90%; object-fit: cover;" src="https://lh3.googleusercontent.com/qJeKuCP6zR6eikIV6QGN7KJny04kz88bEkAe4KFhqhilcC69f3k14J9lo7XpKh9X2rA1tQ4V7DmCOgOpS1-N4rXc_QdJSXVrsh1Y7EXs9lGoDZh5STJrxKD5xbgnDqcp6QJkFkD6dQ=w2400" alt="counting sort" /></p>

<p><br /></p>

<p>After that, we have one 6,</p>

<p><img style="display: inline-block; width: 90%; object-fit: cover;" src="https://lh3.googleusercontent.com/1PPd4pW2I8D_UZtjWrB3wITgbLnawazpOgcaG0LP-rNoR0q4id4HoFHJVftO9tH3-aKGewSRqmELbaRXqQoXAiUQJMlhqZ5Y88gpKLZ1GrhkKSH7vLd91ZePH2HlMKK2D-4z6bR21w=w2400" alt="counting sort" /></p>

<p><br /></p>

<p>one 8,</p>

<p><img style="display: inline-block; width: 90%; object-fit: cover;" src="https://lh3.googleusercontent.com/5TUUAsee4O6Y7bMuL3yo0rSPCnuGlRDnjYzJzcXWndzoeQ7WMOe8_NQ2MUF3Wzar7y9HtNZYoBqtHqUB-nKbIBRywajNDF0xJ0TTW4QZcsMj5FODWFvd924_ootU77v3RpVWMGr9fA=w2400" alt="counting sort" /></p>

<p><br /></p>

<p>and three 9’s</p>

<p><img style="display: inline-block; width: 90%; object-fit: cover;" src="https://lh3.googleusercontent.com/ltLSyju3CrMHbQcxEyAhaFBc-5rYc8y503IIZ1HbEIX4Z0IPoEB6qV2fvR-d7HESjxpmOxpGxrZAtHcpmXLg6g_k-uIIUQy9U9siecgtNHxNST1i0zfo1SO0aEfK0AXzErInONwJ9Q=w2400" alt="counting sort" /></p>

<p><br /></p>

<p>And, with that, we’re done!</p>

<p><img style="display: inline-block; width: 90%; object-fit: cover;" src="https://lh3.googleusercontent.com/nqDoWsqcjPvvwrXA58BYYiD00gCdQf2DXc9a-tncAXFmUra6dSLYdL9jtgc_Lcpz0vbPAIQ-Oqskhakgscb8A3QbgZPHE8CBZTHioWHlTTbJcJk0xndP9BgHrxbOfRSVtEj5aQKGLg=w2400" alt="counting sort" /></p>

<p><br /></p>

<p>Below is the implementation of the algorithm:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// to be provided later...</span>
</code></pre></div></div>

<p><br /></p>]]></content><author><name>Larry</name></author><category term="Algorithms" /><summary type="html"><![CDATA[This post is based on two posts by Geeksforgeeks and interviewcake.]]></summary></entry><entry><title type="html">Radix Sort</title><link href="http://localhost:4000/new-blog/2022/12/09/radixSort.html" rel="alternate" type="text/html" title="Radix Sort" /><published>2022-12-09T00:00:00+00:00</published><updated>2022-12-09T00:00:00+00:00</updated><id>http://localhost:4000/new-blog/2022/12/09/radixSort</id><content type="html" xml:base="http://localhost:4000/new-blog/2022/12/09/radixSort.html"><![CDATA[<p>This post is based on <a href="https://www.geeksforgeeks.org/radix-sort/">Geeksforgeeks</a>, <a href="https://brilliant.org/wiki/radix-sort/">Brilliant</a> and <a href="https://www.interviewkickstart.com/learn/radix-sort-algorithm">Interview Kickstart</a>.</p>

<p>The lower bound for the comparison based sorting algorithm (Merge Sort, Heap Sort, Quick-Sort .. etc) is $O(n \log n)$. They cannot do better than that. Counting sort is a linear time sorting algorithm that sort in $O(n+k)$ time when elements are in the range from 1 to k.</p>

<p>What if the total amount of elements is n, but the values are in the range from 1 to $n^2$ or even larger?</p>

<p>We can’t use counting sort because counting sort will take at least $O(n^2)$ which is worse than comparison-based sorting algorithms.</p>

<p>Can we sort such an array in linear time?</p>

<p><strong>Radix Sort</strong> is the answer. The idea of radix sort is to do digit by digit sort starting from least significant digit to most significant digit. When sorting each digit, radix sort can use any sort algorithm as long as it’s <a href="https://www.freecodecamp.org/news/stability-in-sorting-algorithms-a-treatment-of-equality-fa3140a5a539/">stable</a>. And as a prevalent custom, people use counting sort as a subroutine to sort.</p>

<p>Say we have an array: $[455, 61, 63, 45, 67, 135, 74, 49, 15, 5]$.</p>

<p>Here’s how we do sort using radix sort:</p>

<p><img style="display: inline-block; width: 90%; object-fit: cover;" src="https://lh3.googleusercontent.com/V3H--XYTI8ZUF-6LagfOZrlpjamhFrX803u7TRKl07v-Wlc7skSyApYELIwN37NBG1I09uxaIqJD7GGqqpDXK5A3M6fdG-ES7P0OQk_UTw-IlAQJ3PLIXDdEi7o1FZKHshLUP09Mew=w2400" alt="radix sort" /></p>

<p><br /></p>

<ul>
  <li>We start off by finding the maximum element in the unsorted input array (maxim). The number of digits (d) in maxim gives us the number of passes we need to run to get the fully sorted output.</li>
  <li>Here, the maxim = 455 and d = 3. This tells us that 3 passes will be required to fully sort the array.</li>
  <li>The loop will run once for units place, once for the tens place, and once for hundreds place before the array is finally sorted.</li>
  <li>This array consists of integers in the decimal number system — so the digits will range from 0 to 9. We know we’ll need a count array of size 10 for each pass.</li>
</ul>

<p><br /></p>

<p>We start sorting from the least significant digit (LSD). Once the array is counted based on units place, we can build a unit place sorted array from the count array. Once it’s done, we sort the array again, but this time based on tens place. Finally, we sort the result based on hundreds place.</p>

<p>Now you see the importance of stable sorting. <strong>Once the lower digits are sorted, you don’t want to scramble the order if two elements having the same value at higher digit places.</strong></p>

<p><br /></p>]]></content><author><name>Larry</name></author><category term="Algorithms" /><summary type="html"><![CDATA[This post is based on Geeksforgeeks, Brilliant and Interview Kickstart.]]></summary></entry><entry><title type="html">Selection Sort</title><link href="http://localhost:4000/new-blog/2022/12/09/selectSort.html" rel="alternate" type="text/html" title="Selection Sort" /><published>2022-12-09T00:00:00+00:00</published><updated>2022-12-09T00:00:00+00:00</updated><id>http://localhost:4000/new-blog/2022/12/09/selectSort</id><content type="html" xml:base="http://localhost:4000/new-blog/2022/12/09/selectSort.html"><![CDATA[<p>The selection sort algorithm sorts an array by repeatedly finding the minimum element (considering ascending order) from the unsorted part and putting it at the beginning.</p>

<p>The algorithm maintains two subarrays in a given array. But be noted that we don’t create two arrays, but operate the whole process within the original array.</p>

<ul>
  <li>The subarray which already sorted (left part).</li>
  <li>The remaining subarray was unsorted (right part).</li>
</ul>

<p>From the left most element, we itinerate the whole array one by one. In every itineration of the selection sort, the minimum element (considering ascending order) from the unsorted rigth subarray is picked and moved to the sorted subarray.</p>

<p><img style="display: inline-block; width: 100%; object-fit: cover;" src="https://lh3.googleusercontent.com/eCcXv3avZEntkJkccU9dHA4JYR6H0jGmPdDp4COLx3W_HrP7QkYzbah4qsUmJzXXH1L2fnQ-2_Bh-OKCNuZGkXxbh3B2UbUqS-Lv5Qng46JUyM-w1LBqWKMDw6EhiiiY-JVNa8x9dg=w2400" alt="selction sort" /></p>

<div style="display: flex; align-items: flex-start; justify-content: center; font-size: 14px; color: #777;">Illustration of Selection Sort</div>

<p>Below is the implementation of the algorithm, we use recursion again:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// swap function</span>
<span class="kd">const</span> <span class="nx">swap</span> <span class="o">=</span> <span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">temp</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span>
  <span class="nx">arr</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span>
  <span class="nx">arr</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span> <span class="o">=</span> <span class="nx">temp</span><span class="p">;</span>
<span class="p">};</span>

<span class="c1">// recursion realization of the selection sort</span>
<span class="kd">const</span> <span class="nx">selectRecur</span> <span class="o">=</span> <span class="p">(</span><span class="nx">array</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if </span><span class="p">(</span><span class="nx">n</span> <span class="o">===</span> <span class="nx">array</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="k">return</span> <span class="nx">array</span><span class="p">;</span>

  <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">array</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">array</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">array</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="nf">swap</span><span class="p">(</span><span class="nx">array</span><span class="p">,</span> <span class="nx">n</span><span class="p">,</span> <span class="nx">i</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nf">selectRecur</span><span class="p">(</span><span class="nx">array</span><span class="p">,</span> <span class="nx">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
<span class="p">};</span>

<span class="c1">// we test by a random array</span>
<span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">12</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">];</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">selectRecur</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>
</code></pre></div></div>

<p><br /></p>]]></content><author><name>Larry</name></author><category term="Algorithms" /><summary type="html"><![CDATA[The selection sort algorithm sorts an array by repeatedly finding the minimum element (considering ascending order) from the unsorted part and putting it at the beginning.]]></summary></entry><entry><title type="html">上海乌鲁木齐中路</title><link href="http://localhost:4000/new-blog/y2022/2022/11/27/urumqi.html" rel="alternate" type="text/html" title="上海乌鲁木齐中路" /><published>2022-11-27T00:00:00+00:00</published><updated>2022-11-27T00:00:00+00:00</updated><id>http://localhost:4000/new-blog/y2022/2022/11/27/urumqi</id><content type="html" xml:base="http://localhost:4000/new-blog/y2022/2022/11/27/urumqi.html"><![CDATA[<p><img style="display: inline-block; width: 100%; object-fit: cover;" src="https://lh3.googleusercontent.com/bx7WwZ2CMf-DigfCs07IjPEPP8--sDPv8tGxVbj3curgjae56gRaYs2r2w4Yy4L5enLWQQ11T9wdcCJKaDfhTTZputO4f0UxKRyXV6rbPP2zpU4RhDuvzQlZPlrg1fQ2jux0WUGnmw=w2400" alt="band_of_brothers" /></p>

<p><br />
<br /></p>

<div style="display: flex; align-items: flex-start; justify-content: center; font-size: 30px; color: #777; font-weight: 600">从那天起，</div>

<div style="display: flex; align-items: flex-start; justify-content: center; font-size: 30px; color: #777; font-weight: 600">就不再有乌鲁木齐中路，</div>

<div style="display: flex; align-items: flex-start; justify-content: center; font-size: 30px; color: #777; font-weight: 600">往后就剩下两条路：</div>

<div style="display: flex; align-items: flex-start; justify-content: center; font-size: 30px; color: #777; font-weight: 600">一条是死路，</div>

<div style="display: flex; align-items: flex-start; justify-content: center; font-size: 30px; color: #777; font-weight: 600">另一条也是死路。</div>

<p><br /></p>]]></content><author><name>Larry</name></author><category term="Y2022" /><category term="Opinion" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">If X Then Y - Sufficiency and Necessity</title><link href="http://localhost:4000/new-blog/2022/11/11/xy.html" rel="alternate" type="text/html" title="If X Then Y - Sufficiency and Necessity" /><published>2022-11-11T00:00:00+00:00</published><updated>2022-11-11T00:00:00+00:00</updated><id>http://localhost:4000/new-blog/2022/11/11/xy</id><content type="html" xml:base="http://localhost:4000/new-blog/2022/11/11/xy.html"><![CDATA[<h3 id="if-then-format">If Then Format</h3>

<p><strong>If then</strong> is one of the most important and common logic format we see everyday. When we see <strong>if X, then Y</strong>, the relation can be represented symbolically as:</p>

<p>$$ X \rightarrow Y $$</p>

<p>This is a <strong>cause and effect</strong> relation, a logically equivalent one is called its <strong>contrapositive</strong>:</p>

<p>$$ \neg Y \rightarrow \neg X $$</p>

<p>However, we must bear in mind that <strong>if X, then Y</strong> does not logically give rise to the following relations:</p>

<ul>
  <li><strong>if Y, then X</strong>, or $Y \rightarrow X$</li>
  <li><strong>if NOT X, then NOT Y</strong>, or $\neg X \rightarrow \neg Y$</li>
</ul>

<p>Back to the $X \rightarrow Y$ assertion, we say <strong>X</strong> is a <strong>sufficient</strong> condition guranteeing the truth of <strong>Y</strong>, but is not necessary for <strong>Y</strong> to happen (in another word, there may be other conditions sufficient to give rise to <strong>Y</strong>), and <strong>Y</strong> is a necessary condition required for <strong>X</strong> to be true, but not sufficient to guarantee for <strong>X</strong> to happen.</p>

<p>Now we explore some signal words for both sufficient and necessary conditions:</p>

<p><strong>Sufficient signal words:</strong> ($S \rightarrow Y$)</p>

<ul>
  <li>If S then Y.</li>
  <li>All S are Y.</li>
  <li>Every S is Y.</li>
  <li>Whenever S happens, Y happens (or Y happens whenever S happens).</li>
  <li>Each time S happens, Y happens (or Y happens each time S happens).</li>
  <li>S is enough (or adequate or sufficient) to Y.</li>
  <li>In order for S to happen, Y must happen (or Y must happen in order for S to happen).</li>
</ul>

<p><strong>Necessary signal words:</strong> ($Y \rightarrow N$)</p>

<ul>
  <li>Y happens <span style="color: Magenta">only if</span> N happens.</li>
  <li>In order for Y to happen, N must happen (or N must happen in order for Y to happen).</li>
  <li>Only N are Y.</li>
  <li>The only way Y can happen is if N happens.</li>
  <li>Y isn’t possible unless N happens.</li>
  <li>Y depends on N.</li>
  <li>N is required for Y.</li>
</ul>

<p><br /></p>

<h3 id="question-examples">Question Examples</h3>

<p><strong>Example 1:</strong></p>

<p><strong>Factory manager:</strong> One reason the automobile parts this factory produces are expensive is that our manufacturing equipment is outdated and inefficient. Our products would be more competitively priced if we were to refurbish the factory completely with new, more efficient equipment. Therefore, since to survive in today’s market we have to make our products more competitively priced, we must completely refurbish the factory in order to survive.</p>

<p><strong>Explanation:</strong></p>

<p>The first sentence of the argument is not a logical expression, or we cannot establish a logical relation based on it. We only know that <strong>equipment</strong> is one of the reasons attributing to expensive result, but it’s neither a sufficient or necessary condistion to the result, and <em>vice versa</em>.</p>

<p>The second sentence “Our products would be more competitively priced if we were to refurbish the factory completely with new, more efficient equipment” is a logical expression and serves as a premise. We can deduce an format from this sentence as <strong>Refurbish</strong> $\rightarrow$ <strong>Competitive Price</strong></p>

<p>The manager then follows with his argument, if we put it in symbolic way,</p>

<p><strong>Competitive Price</strong> $\rightarrow$ <strong>Refurbish</strong></p>

<p>Apparently, it’s not logically equivalent to the premise. It mistakenly treat necessary condition <strong>Competitive Price</strong> as sufficient.</p>

<p><br /></p>

<p><strong>Example 2:</strong>
A book tour will be successful if it is well publicized and the author is an established writer. Julia is an established writer, and her book tour was successful. So her book tour must have been well publicized.</p>

<p><strong>Explanation:</strong></p>

<p>We need to explore a bit more about the logic expression first. According to <a href="https://en.wikipedia.org/wiki/De_Morgan%27s_laws">De Morgan’s laws</a>, if you want to negate a disjunction or conjunction,</p>

<ul>
  <li>The negation of a disjunction is the conjunction of the negations: $ \overline{A \cup B} \equiv \overline{A} \cap \overline{B}$</li>
  <li>The negation of a conjunction is the disjunction of the negations: $ \overline{A \cap B} \equiv \overline{A} \cup \overline{B}$</li>
</ul>

<p>The logic expression of the exmaple’s first sentence is:</p>

<p><strong>Publicized</strong> AND <strong>Established</strong> $\rightarrow$ <strong>Successful Tour</strong></p>

<p>The only correct deduction is the contrapositive of the above expressioin:</p>

<p>not <strong>Successful Tour</strong> $\rightarrow$ not <strong>Publicized</strong> OR not <strong>Established</strong></p>

<p>In English, we can say <em>if the book tour is not successful, but Julia is known to be an established writer, then it must be true that the tour is not well publicized</em>.</p>

<p><br /></p>

<h3 id="a-small-tip-on-only-if">A Small Tip on “only if”</h3>

<p>As mentioned above, we know <strong>X only if Y</strong> means $X \rightarrow Y$. An example may look like <em>“I wear a hat only if it’s sunny.”</em></p>

<p>However, we also see some variations of “only”, which might not be so apparent at the first sight, but they are all the same as “only if”, or <strong>Hat</strong> $\rightarrow$ <strong>Sunny</strong>:</p>

<ul>
  <li>I <strong>only</strong> wear a hat <strong>if</strong> it’s sunny.</li>
  <li>I wear a hat <strong>only when</strong> it’s sunny.</li>
  <li>The <strong>only time</strong> I wear a hat is if it’s sunny.</li>
  <li><strong>Only</strong> sunny days will get me to wear a hat.</li>
</ul>

<p><br /></p>

<h3 id="some-tricky-expressions">Some Tricky Expressions:</h3>

<hr />

<ul>
  <li><strong>Any X is/are Y</strong>: $X \rightarrow Y$</li>
  <li><strong>Every X is Y</strong>: $X \rightarrow Y$</li>
  <li><strong>X requires Y</strong>: $X \rightarrow Y$</li>
  <li><strong>X depends on Y</strong>: $X \rightarrow Y$</li>
  <li><strong>No X unless Y</strong>: $X \rightarrow Y$</li>
</ul>

<hr />

<ul>
  <li><strong><span style="color: Magenta">No X is/are Y</span></strong>: $X \rightarrow \text{not } Y$ (don’t write as not $X \rightarrow Y$)</li>
  <li><strong>X cannot be Y</strong>: $X \rightarrow \text{not } Y$</li>
</ul>

<hr />

<ul>
  <li><strong>Only X are Y</strong>: $Y \rightarrow X$</li>
  <li><strong>Without X there can be no Y</strong>: $Y \rightarrow X$</li>
  <li><strong>X happens whenever Y happens</strong>: $Y \rightarrow X$</li>
</ul>

<p><br /></p>

<h3 id="unless-format">Unless format</h3>

<p>Sometimes we also encounter an expression as <strong>X unless Y</strong>. For example, say, <em>I go running outside unless it’s snowing</em>. How to translate this sentence into symbolic expression?</p>

<p>Well, it equals to <strong>if not Y then X</strong>, or <strong>if not X then Y</strong>, the symbolic relation is</p>

<p>$$ \neg Y \rightarrow X \text{ or, } \neg X \rightarrow Y$$</p>

<p>In English, we say <em>if it’s not snowing, I go running outside</em>, or <em>if I don’t go running outside, it must be snowing</em>.</p>

<p>Of course, we also see example as <strong>Not X unless Y</strong>, treating the negation as part of the sentence, the above logic still applies. For example, “<em>Unless the polls are grossly inaccurate, Slater will not win</em>”. In logic, it’s equal to say:</p>

<p><em>“If the polls are accurate, then Slater will not win.”</em></p>

<p>or,</p>

<p><em>“if Slater wins, then the polls are grossly inaccurate.”</em></p>

<p><br /></p>]]></content><author><name>Larry</name></author><category term="Math123" /><summary type="html"><![CDATA[If Then Format]]></summary></entry><entry><title type="html">为什么我的省提名不加600分？</title><link href="http://localhost:4000/new-blog/y2022/2022/11/10/600.html" rel="alternate" type="text/html" title="为什么我的省提名不加600分？" /><published>2022-11-10T00:00:00+00:00</published><updated>2022-11-10T00:00:00+00:00</updated><id>http://localhost:4000/new-blog/y2022/2022/11/10/600</id><content type="html" xml:base="http://localhost:4000/new-blog/y2022/2022/11/10/600.html"><![CDATA[<p><img style="display: inline-block; width: 100%; object-fit: cover;" src="https://lh3.googleusercontent.com/201EQLxe2xT7SDuUlfeJj0CSskP3c7BUbG_EkdGSWBMrGXgSA7SbmhprfIG2QNIQA-7N7txG5Img1foaUz6G3p-6RQlp5wy9Jhj9k34c3Q2D-9HjOPh9S-dUCSyeARy5DpF3Miy4xg=w2400" alt="EE-Canada" /></p>

<p><br /></p>

<p>本文来自于知乎<a href="https://zhuanlan.zhihu.com/p/29235440">小安说加拿大</a>。</p>

<p><br /></p>

<h3 id="加拿大联邦移民">加拿大联邦移民</h3>

<p>加拿大的项目主要分为联邦移民项目和省提名。首先来看联邦移民项目。联邦移民的项目是涵盖各省的，也就是说申请人无论在哪个省都可以申请（魁北克除外）。联邦的项目主要有三大类：经验类移民（CEC）、技术移民（FSW）、以及技工移民（FST）。</p>

<p>联邦经验类移民（Canadian Experience Class ,简称 CEC）要求申请人有一年的加拿大工作经验。申请人通过外劳 LMIA 获得加拿大工作签证进入加拿大进行实际工作（期间孩子可以免费读书，爱人也可以拿到开放工签或者学习签证），积累一年全职的加拿大工作经验并取得雅思 5 分以上的成绩就满足了经验类移民的要求。</p>

<p>移民局官网链接：http://www.cic.gc.ca/english/immigrate/cec/apply-who.asp</p>

<p>联邦技术移民（Federal Skilled Worker，简称 FSW）是目前加拿大最快的移民项目，审核速度极快。申请人只需要拥有一年工作经验（任何国家的经验都可以算）；雅思听说读写分别获得 6 分或以上；满足技术移民打分表 67 分就符合了经验移民的基本要求。</p>

<p>移民局官网链接：http://www.cic.gc.ca/english/immigrate/skilled/apply-who.asp</p>

<p>联邦技工移民（Federal Skilled Trades，简称 FST）是加拿大政府为有特殊技能的人员设立的移民项目，只有加拿大政府规定的职位才能申请。申请人一般需要在过去的 5 年内有 2 年加拿大政府所规定的职位的经验。其优势在于对申请人的雅思要求比其他项目相对要低，申请人一般只要达到雅思平均分 4.5 分就能满足申请要求。因此解决了多数技工英文不好，移民难的问题。加拿大规定的常见的特殊职位有厨师，甜点师，汽修，焊工，木工，电工等。</p>

<p><br /></p>

<h3 id="联邦快速通道express-entry">联邦快速通道（Express Entry）</h3>

<p>联邦的这三个项目的要求看起来并不高，那为什么不是人人都能申请呢？那是因为联邦快速通道的存在。</p>

<p>快速通道系统（Express Entry，简称 EE）是加拿大移民部在 2015 年 1 月推出的适用于联邦技术移民、联邦技工移民、加拿大经验类移民这三大移民项目的综合打分系统，总分 1200 分，其中 600 分是个人得分，也就是自身条件，如年龄、教育、语言、加拿大工作经验等的得分，另外 600 分是省提名的加分（这个后文会有进一步解释）。</p>

<p>简单点来说，快速通道不是单独的移民类别，而是一个筛选系统，被选中的技术移民、技工移民、经验类移民的申请人才能够正式递交移民申请，这个系统能确保这些申请人在 6 个月之内就得到审核的结果。而那些没有被选出来的申请人，即使满足了项目的要求，也不能正式递交移民申请。</p>

<p>也就是说，单单满足这三个项目的要求，只能保证申请人能够进入到快速通道的池子里面去，而不能保证被选出来。想要被快速通道选出来，正式递交申请，还必须和全球的申请人竞争分数。快速通道满分 1200 分，目前的抽签分数线维持在 500 分上下。想了解过往的抽分情况，可以参考<a href="https://www.canada.ca/en/immigration-refugees-citizenship/services/immigrate-canada/express-entry/submit-profile/rounds-invitations.html">移民局官网</a>或者<a href="https://www.immigration.ca/express-entry-immigration-draws/">第三方机构统计数据</a>。</p>

<p>移民局打分表<a href="http://www.cic.gc.ca/english/immigrate/skilled/crs-tool.asp">CRS-Tool</a>，看看你的得分在多少吧。</p>

<p>这三大移民项目的申请流程是一样的。申请人在满足条件的基础上将个人信息提交到联邦快速通道系统，快速通道系统将根据填写的信息自动为每个申请人计算得分。移民部会根据综合打分系统定期筛选符合条件的申请人，向他们发出邀请。邀请后可以递交正式的移民申请。</p>

<p><br /></p>

<h3 id="什么是省提名">什么是省提名？</h3>

<p>加拿大省提名移民计划（Provincial Nominee Program，简称 PNP）是加拿大各个省份根据自己省份的情况制定移民政策，吸收移民的一种方式。省政府没有权力发枫叶卡，申请人在通过省里面的批准后只会获得省提名信,需递交联邦政府进行二次审核才能获得枫叶卡，但申请人一旦获得省提名，基本上保证可以拿到枫叶卡。</p>

<p>加拿大除了魁北克省是单独的移民体系、以及人口最少的努纳武特地区没有省提名外，其余各省均有自己的省提名移民计划。省提名的项目非常繁杂，申请人情况不同还需具体咨询。但大体来说，省提名可以分为快速的 EE 和慢速的 regular 项目。这边也就涉及到了很多申请人很迷茫的到底能不能凭省提名加 600 分的问题。</p>

<p><strong>省提名快速类别 EE：</strong> 顾名思义那就是快！申请人在拿到提名信后可以直接走联邦快速通道并获得 600 分的加分，刚才用 <a href="http://www.cic.gc.ca/english/immigrate/skilled/crs-tool.asp">CRS-Tool</a> 算分并万分沮丧的申请人是不是又燃起了重重希望呢！</p>

<p>然而，想要拿到这个 600 分加分，申请人在符合省提名的要求的同时，还需符合联邦技术移民、经验类移民或者技工移民三个项目中的一个。注意，是在递交省提名阶段就符合，而不是到了联邦阶段才符合。</p>

<p><img src="https://lh3.googleusercontent.com/HzNOkH2pRyZGeu8OabdLPR9i9rJ_sSzOdWZGIBwVGjrBTmIZRRzh8PDUmyNzw5X3rZ48N-Jkv6wzwz3SBi4BQIVFLllYkH-H-dZ7VIXXhI7JYVC8IyXZS6EXSdVNcVxYbEr3jAbQNA=w2400" alt="signage" /></p>

<p><br /></p>

<p><strong>省提名普通类别：</strong> 如果申请人不符合以上任何一个项目，只能走 regular 的省提名项目。那么，在联邦阶段，只能递交 paper application，当然也拿不到 600 分的加分。审核时间通常长达 14 个月。</p>

<p>所以，满不满足联邦的项目决定了在省提名的联邦阶段，到底可以走快速通道还是走普通的 paper application。一般提名信上也会明确地给出了说明。</p>

<p>EE 的省提名信：
This letter confirms that you have been nominated for the Provincial Nominee Program. <strong>Your nomination is through Express Entry</strong>.</p>

<p>非 EE 的省提名信：
This letter confirms that you have been nominated for the Provincial Nominee Program. You must apply to Citizenship and Immigration Canada (CIC) using a paper application form. <strong>Please note this nomination is not valid for Express Entry</strong>.</p>

<p><br /></p>]]></content><author><name>Larry</name></author><category term="Y2022" /><category term="Immigration" /><summary type="html"><![CDATA[]]></summary></entry></feed>